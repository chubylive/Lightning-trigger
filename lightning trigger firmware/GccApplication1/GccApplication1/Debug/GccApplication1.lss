
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800062  00800062  000003b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b13  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000090c  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000415  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000577  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000014c  00000000  00000000  00001e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000275  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003e3  00000000  00000000  0000223d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	54 c1       	rjmp	.+680    	; 0x2c4 <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e1       	ldi	r30, 0x1A	; 26
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a9 36       	cpi	r26, 0x69	; 105
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	ec d0       	rcall	.+472    	; 0x22e <main>
  56:	5f c1       	rjmp	.+702    	; 0x316 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <adc_start>:
	
	adc_start();
}

void adc_start(){
	ADCSRA |= _BV(ADSC);
  5a:	36 9a       	sbi	0x06, 6	; 6
  5c:	08 95       	ret

0000005e <adc_init>:
 *  Author: chuby
 */ 
#include "adc.h"
uint16_t adc_val;
void adc_init(){
	ADMUX |= _BV(REFS0);
  5e:	3e 9a       	sbi	0x07, 6	; 7
	
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS0) |_BV(ADPS1) | _BV (ADPS2) | _BV (ADATE);
  60:	86 b1       	in	r24, 0x06	; 6
  62:	8f 6a       	ori	r24, 0xAF	; 175
  64:	86 b9       	out	0x06, r24	; 6
	DIDR0 |= _BV(ADC0D);
  66:	08 9a       	sbi	0x01, 0	; 1
	
	sei();	
  68:	78 94       	sei
	
	adc_start();
  6a:	f7 df       	rcall	.-18     	; 0x5a <adc_start>
  6c:	08 95       	ret

0000006e <IR_Control_Init>:

#include "IRControl.h"

 
void IR_Control_Init(){
	TCCR1A = (1<<WGM11) | (1<< COM1A1); // non-inverting, Mode 14: Fast PWM
  6e:	82 e8       	ldi	r24, 0x82	; 130
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<< WGM13) | (1<<WGM12) | (1<<CS10); // prescaler = 1
  72:	89 e1       	ldi	r24, 0x19	; 25
  74:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 210; // because ((16000000 / 38000) /1)-1 = 420
  76:	82 ed       	ldi	r24, 0xD2	; 210
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	95 bd       	out	0x25, r25	; 37
  7c:	84 bd       	out	0x24, r24	; 36
	            //	       ((F_CPU / F_PWM) / Prescaler) - 1
	OCR1A = 105; // 420 / 2 to get a 50% duty cycle
  7e:	89 e6       	ldi	r24, 0x69	; 105
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	9b bd       	out	0x2b, r25	; 43
  84:	8a bd       	out	0x2a, r24	; 42

	  DDRA |= (1<<PA6); // set OC1A to output
  86:	d6 9a       	sbi	0x1a, 6	; 26
	  DDRA |= (1<<DDA3); //set pin8 to be output to control led
  88:	d3 9a       	sbi	0x1a, 3	; 26
	  PORTA |= (1<<PA3); //initialize with pin high(led off)
  8a:	db 9a       	sbi	0x1b, 3	; 27
  8c:	08 95       	ret

0000008e <shutter_now>:
}


void shutter_now(){

  PORTA &= ~(1 << PA3);
  8e:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e8       	ldi	r24, 0x8F	; 143
  92:	95 e6       	ldi	r25, 0x65	; 101
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <shutter_now+0x6>
  98:	00 c0       	rjmp	.+0      	; 0x9a <shutter_now+0xc>
  9a:	00 00       	nop
 
  _delay_ms(13);
  PORTA |= (1 << PA3);
  9c:	db 9a       	sbi	0x1b, 3	; 27
  9e:	ef e6       	ldi	r30, 0x6F	; 111
  a0:	f7 e1       	ldi	r31, 0x17	; 23
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <shutter_now+0x14>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <shutter_now+0x1a>
  a8:	00 00       	nop
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	90 e0       	ldi	r25, 0x00	; 0

  _delay_ms(3);

for (int i = 0; i < 7; ++i)
{
  PORTA &= ~(1 << PA3);
  ae:	db 98       	cbi	0x1b, 3	; 27
  b0:	ef ec       	ldi	r30, 0xCF	; 207
  b2:	f7 e0       	ldi	r31, 0x07	; 7
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <shutter_now+0x26>
  b8:	00 c0       	rjmp	.+0      	; 0xba <shutter_now+0x2c>
  ba:	00 00       	nop
  _delay_ms(1);
  PORTA |= (1 << PA3);
  bc:	db 9a       	sbi	0x1b, 3	; 27
  be:	ef ec       	ldi	r30, 0xCF	; 207
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <shutter_now+0x34>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <shutter_now+0x3a>
  c8:	00 00       	nop
  ca:	01 97       	sbiw	r24, 0x01	; 1
  _delay_ms(13);
  PORTA |= (1 << PA3);

  _delay_ms(3);

for (int i = 0; i < 7; ++i)
  cc:	81 f7       	brne	.-32     	; 0xae <shutter_now+0x20>
}
  
	// low wait 13ms
	// high wait 3m
	// 7 pulse of 1ms on 1ms off
}
  ce:	08 95       	ret

000000d0 <setup>:
uint8_t get_avrg_diff(uint16_t *buff_sample, uint16_t *buff_avrg,  uint16_t avrg_len);


void setup()
{
	IR_Control_Init();
  d0:	ce df       	rcall	.-100    	; 0x6e <IR_Control_Init>
	adc_init();
  d2:	c5 df       	rcall	.-118    	; 0x5e <adc_init>
	PORTA |= _BV(PA1) | _BV(PA2); // setup pa1 and pa2 as inputs with pull up register
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	86 60       	ori	r24, 0x06	; 6
  d8:	8b bb       	out	0x1b, r24	; 27
	buttonState = (PINA & _BV(PA1));
  da:	89 b3       	in	r24, 0x19	; 25
  dc:	82 70       	andi	r24, 0x02	; 2
  de:	80 93 64 00 	sts	0x0064, r24
	button2State = (PINA & _BV(PA2));
  e2:	89 b3       	in	r24, 0x19	; 25
  e4:	84 70       	andi	r24, 0x04	; 4
  e6:	80 93 66 00 	sts	0x0066, r24
  ea:	08 95       	ret

000000ec <collect_sample>:
	
}

void collect_sample(uint16_t *buff, uint16_t buff_len ){
	uint16_t idx;
	for (idx = 0; idx < buff_len; idx++){
  ec:	61 15       	cp	r22, r1
  ee:	71 05       	cpc	r23, r1
  f0:	b9 f0       	breq	.+46     	; 0x120 <collect_sample+0x34>
  f2:	e8 2f       	mov	r30, r24
  f4:	f9 2f       	mov	r31, r25
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
		buff[idx] = adc_val;
  fa:	20 91 62 00 	lds	r18, 0x0062
  fe:	30 91 63 00 	lds	r19, 0x0063
 102:	21 93       	st	Z+, r18
 104:	31 93       	st	Z+, r19
 106:	2f e7       	ldi	r18, 0x7F	; 127
 108:	38 e3       	ldi	r19, 0x38	; 56
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <collect_sample+0x20>
 114:	00 c0       	rjmp	.+0      	; 0x116 <collect_sample+0x2a>
 116:	00 00       	nop
	
}

void collect_sample(uint16_t *buff, uint16_t buff_len ){
	uint16_t idx;
	for (idx = 0; idx < buff_len; idx++){
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	86 17       	cp	r24, r22
 11c:	97 07       	cpc	r25, r23
 11e:	69 f7       	brne	.-38     	; 0xfa <collect_sample+0xe>
 120:	08 95       	ret

00000122 <get_avrg_diff>:
		buff[idx] = adc_val;
		_delay_ms(50);
	}
}

uint8_t get_avrg_diff(uint16_t *buff_sample, uint16_t *buff_avrg,  uint16_t avrg_len){
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	uint16_t idx, jdx, kdx;
	uint16_t avrg = 0;
	for (idx = 0, jdx = 1; idx < avrg_len; idx++){
 12a:	41 15       	cp	r20, r1
 12c:	51 05       	cpc	r21, r1
 12e:	29 f1       	breq	.+74     	; 0x17a <__stack+0x1b>
		buff_avrg[avrg_len] = buff_sample[idx] - buff_sample[jdx++];
 130:	8a 01       	movw	r16, r20
 132:	00 0f       	add	r16, r16
 134:	11 1f       	adc	r17, r17
 136:	db 01       	movw	r26, r22
 138:	a0 0f       	add	r26, r16
 13a:	b1 1f       	adc	r27, r17
 13c:	e8 2f       	mov	r30, r24
 13e:	f9 2f       	mov	r31, r25
		buff[idx] = adc_val;
		_delay_ms(50);
	}
}

uint8_t get_avrg_diff(uint16_t *buff_sample, uint16_t *buff_avrg,  uint16_t avrg_len){
 140:	e8 01       	movw	r28, r16
 142:	ce 0f       	add	r28, r30
 144:	df 1f       	adc	r29, r31
	uint16_t idx, jdx, kdx;
	uint16_t avrg = 0;
	for (idx = 0, jdx = 1; idx < avrg_len; idx++){
		buff_avrg[avrg_len] = buff_sample[idx] - buff_sample[jdx++];
 146:	81 91       	ld	r24, Z+
 148:	91 91       	ld	r25, Z+
 14a:	20 81       	ld	r18, Z
 14c:	31 81       	ldd	r19, Z+1	; 0x01
 14e:	82 1b       	sub	r24, r18
 150:	93 0b       	sbc	r25, r19
 152:	11 96       	adiw	r26, 0x01	; 1
 154:	9c 93       	st	X, r25
 156:	8e 93       	st	-X, r24
}

uint8_t get_avrg_diff(uint16_t *buff_sample, uint16_t *buff_avrg,  uint16_t avrg_len){
	uint16_t idx, jdx, kdx;
	uint16_t avrg = 0;
	for (idx = 0, jdx = 1; idx < avrg_len; idx++){
 158:	ec 17       	cp	r30, r28
 15a:	fd 07       	cpc	r31, r29
 15c:	a1 f7       	brne	.-24     	; 0x146 <get_avrg_diff+0x24>
 15e:	fb 01       	movw	r30, r22
		buff[idx] = adc_val;
		_delay_ms(50);
	}
}

uint8_t get_avrg_diff(uint16_t *buff_sample, uint16_t *buff_avrg,  uint16_t avrg_len){
 160:	db 01       	movw	r26, r22
 162:	a0 0f       	add	r26, r16
 164:	b1 1f       	adc	r27, r17
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t avrg = 0;
	for (idx = 0, jdx = 1; idx < avrg_len; idx++){
		buff_avrg[avrg_len] = buff_sample[idx] - buff_sample[jdx++];
	}
	for (kdx = 0; kdx < avrg_len; kdx++){
		avrg +=  buff_avrg[kdx];
 16a:	21 91       	ld	r18, Z+
 16c:	31 91       	ld	r19, Z+
 16e:	82 0f       	add	r24, r18
 170:	93 1f       	adc	r25, r19
	uint16_t idx, jdx, kdx;
	uint16_t avrg = 0;
	for (idx = 0, jdx = 1; idx < avrg_len; idx++){
		buff_avrg[avrg_len] = buff_sample[idx] - buff_sample[jdx++];
	}
	for (kdx = 0; kdx < avrg_len; kdx++){
 172:	ea 17       	cp	r30, r26
 174:	fb 07       	cpc	r31, r27
 176:	c9 f7       	brne	.-14     	; 0x16a <__stack+0xb>
 178:	02 c0       	rjmp	.+4      	; 0x17e <__stack+0x1f>
}

uint8_t get_avrg_diff(uint16_t *buff_sample, uint16_t *buff_avrg,  uint16_t avrg_len){
	uint16_t idx, jdx, kdx;
	uint16_t avrg = 0;
	for (idx = 0, jdx = 1; idx < avrg_len; idx++){
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
	}
	for (kdx = 0; kdx < avrg_len; kdx++){
		avrg +=  buff_avrg[kdx];
	}
	
	return avrg/avrg_len;	
 17e:	ba 01       	movw	r22, r20
 180:	b6 d0       	rcall	.+364    	; 0x2ee <__udivmodhi4>
 182:	86 2f       	mov	r24, r22
	
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <calculate_treshold>:

void calculate_treshold(uint16_t sample_num){
 18e:	af 92       	push	r10
 190:	bf 92       	push	r11
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	uint16_t avrg_chg = get_avrg_diff(sample_buffer,average_buffer, (sample_num -1) );
	//put diff of 1 + idxsmp and idxsmp into average buf
	// calculate average. 
	TRIGGER_THRESHOLD = avrg_chg;
	
}
 1a6:	ad b6       	in	r10, 0x3d	; 61
 1a8:	be b6       	in	r11, 0x3e	; 62
	return avrg/avrg_len;	
	
}

void calculate_treshold(uint16_t sample_num){
	uint16_t sample_buffer[sample_num];
 1aa:	9c 01       	movw	r18, r24
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	4d b7       	in	r20, 0x3d	; 61
 1b2:	5e b7       	in	r21, 0x3e	; 62
 1b4:	42 1b       	sub	r20, r18
 1b6:	53 0b       	sbc	r21, r19
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	5e bf       	out	0x3e, r21	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	4d bf       	out	0x3d, r20	; 61
 1c2:	0d b7       	in	r16, 0x3d	; 61
 1c4:	1e b7       	in	r17, 0x3e	; 62
 1c6:	0f 5f       	subi	r16, 0xFF	; 255
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t average_buffer[sample_num - 1];
 1ca:	6c 01       	movw	r12, r24
 1cc:	51 e0       	ldi	r21, 0x01	; 1
 1ce:	c5 1a       	sub	r12, r21
 1d0:	d1 08       	sbc	r13, r1
 1d2:	96 01       	movw	r18, r12
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	4d b7       	in	r20, 0x3d	; 61
 1da:	5e b7       	in	r21, 0x3e	; 62
 1dc:	42 1b       	sub	r20, r18
 1de:	53 0b       	sbc	r21, r19
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	5e bf       	out	0x3e, r21	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	4d bf       	out	0x3d, r20	; 61
 1ea:	ed b6       	in	r14, 0x3d	; 61
 1ec:	fe b6       	in	r15, 0x3e	; 62
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	e2 0e       	add	r14, r18
 1f4:	f3 1e       	adc	r15, r19
	
	//collect sample in to smp buff.
	collect_sample(sample_buffer, sample_num);
 1f6:	bc 01       	movw	r22, r24
 1f8:	80 2f       	mov	r24, r16
 1fa:	91 2f       	mov	r25, r17
 1fc:	77 df       	rcall	.-274    	; 0xec <collect_sample>
	uint16_t avrg_chg = get_avrg_diff(sample_buffer,average_buffer, (sample_num -1) );
 1fe:	a6 01       	movw	r20, r12
 200:	6e 2d       	mov	r22, r14
 202:	7f 2d       	mov	r23, r15
 204:	80 2f       	mov	r24, r16
 206:	91 2f       	mov	r25, r17
 208:	8c df       	rcall	.-232    	; 0x122 <get_avrg_diff>
	//put diff of 1 + idxsmp and idxsmp into average buf
	// calculate average. 
	TRIGGER_THRESHOLD = avrg_chg;
 20a:	80 93 60 00 	sts	0x0060, r24
	
}
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	be be       	out	0x3e, r11	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	ad be       	out	0x3d, r10	; 61
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	df 90       	pop	r13
 226:	cf 90       	pop	r12
 228:	bf 90       	pop	r11
 22a:	af 90       	pop	r10
 22c:	08 95       	ret

0000022e <main>:

int main(void)
{
	setup();
 22e:	50 df       	rcall	.-352    	; 0xd0 <setup>
	calculate_treshold(10);
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac df       	rcall	.-168    	; 0x18e <calculate_treshold>
		if ( val != buttonState)
		{
			TRIGGER_THRESHOLD +=2;
			if (TRIGGER_THRESHOLD > 150)
			{
				TRIGGER_THRESHOLD = 150;
 236:	06 e9       	ldi	r16, 0x96	; 150
		if (val2 != button2State)
		{
			TRIGGER_THRESHOLD--;
			if (TRIGGER_THRESHOLD < 1)
			{
				TRIGGER_THRESHOLD = 1;
 238:	11 e0       	ldi	r17, 0x01	; 1
		if((newLightVal - curLightVal) > TRIGGER_THRESHOLD){
			shutter_now();
			_delay_ms(1000);
		}
		
		curLightVal = adc_val;  
 23a:	c2 e6       	ldi	r28, 0x62	; 98
 23c:	d0 e0       	ldi	r29, 0x00	; 0
{
	setup();
	calculate_treshold(10);
    for(;;)
    {
		val = (PINA & _BV(PA1));
 23e:	99 b3       	in	r25, 0x19	; 25
 240:	92 70       	andi	r25, 0x02	; 2
 242:	90 93 67 00 	sts	0x0067, r25
		val2 = (PINA & _BV(PA2));
 246:	89 b3       	in	r24, 0x19	; 25
 248:	84 70       	andi	r24, 0x04	; 4
 24a:	80 93 68 00 	sts	0x0068, r24
		
		if ( val != buttonState)
 24e:	20 91 64 00 	lds	r18, 0x0064
 252:	92 17       	cp	r25, r18
 254:	51 f0       	breq	.+20     	; 0x26a <main+0x3c>
		{
			TRIGGER_THRESHOLD +=2;
 256:	20 91 60 00 	lds	r18, 0x0060
 25a:	2e 5f       	subi	r18, 0xFE	; 254
			if (TRIGGER_THRESHOLD > 150)
 25c:	27 39       	cpi	r18, 0x97	; 151
 25e:	18 f4       	brcc	.+6      	; 0x266 <main+0x38>
		val = (PINA & _BV(PA1));
		val2 = (PINA & _BV(PA2));
		
		if ( val != buttonState)
		{
			TRIGGER_THRESHOLD +=2;
 260:	20 93 60 00 	sts	0x0060, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x3c>
			if (TRIGGER_THRESHOLD > 150)
			{
				TRIGGER_THRESHOLD = 150;
 266:	00 93 60 00 	sts	0x0060, r16
			}
		}
		buttonState = val;
 26a:	90 93 64 00 	sts	0x0064, r25

		if (val2 != button2State)
 26e:	90 91 66 00 	lds	r25, 0x0066
 272:	89 17       	cp	r24, r25
 274:	49 f0       	breq	.+18     	; 0x288 <main+0x5a>
		{
			TRIGGER_THRESHOLD--;
 276:	90 91 60 00 	lds	r25, 0x0060
 27a:	91 50       	subi	r25, 0x01	; 1
			if (TRIGGER_THRESHOLD < 1)
 27c:	19 f0       	breq	.+6      	; 0x284 <main+0x56>
		}
		buttonState = val;

		if (val2 != button2State)
		{
			TRIGGER_THRESHOLD--;
 27e:	90 93 60 00 	sts	0x0060, r25
 282:	02 c0       	rjmp	.+4      	; 0x288 <main+0x5a>
			if (TRIGGER_THRESHOLD < 1)
			{
				TRIGGER_THRESHOLD = 1;
 284:	10 93 60 00 	sts	0x0060, r17
			}
		}
		
		button2State = val2;
 288:	80 93 66 00 	sts	0x0066, r24
		
		uint16_t newLightVal = adc_val;
		
		if((newLightVal - curLightVal) > TRIGGER_THRESHOLD){
 28c:	80 91 65 00 	lds	r24, 0x0065
 290:	20 91 62 00 	lds	r18, 0x0062
 294:	30 91 63 00 	lds	r19, 0x0063
 298:	28 1b       	sub	r18, r24
 29a:	31 09       	sbc	r19, r1
 29c:	80 91 60 00 	lds	r24, 0x0060
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	82 17       	cp	r24, r18
 2a4:	93 07       	cpc	r25, r19
 2a6:	50 f4       	brcc	.+20     	; 0x2bc <main+0x8e>
			shutter_now();
 2a8:	f2 de       	rcall	.-540    	; 0x8e <shutter_now>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	89 e6       	ldi	r24, 0x69	; 105
 2ae:	98 e1       	ldi	r25, 0x18	; 24
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x82>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x8c>
 2ba:	00 00       	nop
			_delay_ms(1000);
		}
		
		curLightVal = adc_val;  
 2bc:	88 81       	ld	r24, Y
 2be:	80 93 65 00 	sts	0x0065, r24
	}
 2c2:	bd cf       	rjmp	.-134    	; 0x23e <main+0x10>

000002c4 <__vector_13>:
}

ISR( ADC_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
	ADCSRA |= _BV(ADIF);
 2d2:	34 9a       	sbi	0x06, 4	; 6
	adc_val = ADC;
 2d4:	84 b1       	in	r24, 0x04	; 4
 2d6:	95 b1       	in	r25, 0x05	; 5
 2d8:	90 93 63 00 	sts	0x0063, r25
 2dc:	80 93 62 00 	sts	0x0062, r24
}
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__udivmodhi4>:
 2ee:	aa 1b       	sub	r26, r26
 2f0:	bb 1b       	sub	r27, r27
 2f2:	51 e1       	ldi	r21, 0x11	; 17
 2f4:	07 c0       	rjmp	.+14     	; 0x304 <__udivmodhi4_ep>

000002f6 <__udivmodhi4_loop>:
 2f6:	aa 1f       	adc	r26, r26
 2f8:	bb 1f       	adc	r27, r27
 2fa:	a6 17       	cp	r26, r22
 2fc:	b7 07       	cpc	r27, r23
 2fe:	10 f0       	brcs	.+4      	; 0x304 <__udivmodhi4_ep>
 300:	a6 1b       	sub	r26, r22
 302:	b7 0b       	sbc	r27, r23

00000304 <__udivmodhi4_ep>:
 304:	88 1f       	adc	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	5a 95       	dec	r21
 30a:	a9 f7       	brne	.-22     	; 0x2f6 <__udivmodhi4_loop>
 30c:	80 95       	com	r24
 30e:	90 95       	com	r25
 310:	bc 01       	movw	r22, r24
 312:	cd 01       	movw	r24, r26
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
